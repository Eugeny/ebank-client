// Generated by CoffeeScript 1.7.1
(function() {
  window.tabID = Math.floor(Math.random() * 0x10000).toString(16);

  window.app = angular.module('app', ['ngAnimate', 'ngCookies', 'ngResource', 'ngRoute', 'ui.bootstrap', 'ui.bootstrap.smartdropdown', 'angular-loading-bar', 'btford.socket-io', 'ui.sortable', 'acute.select', 'pasvaz.bindonce']);

  app.config(function($interpolateProvider, $rootScopeProvider) {
    $interpolateProvider.startSymbol('[[');
    $interpolateProvider.endSymbol(']]');
    return $rootScopeProvider.digestTtl(100);
  });

  app.directive('activeLink', (function(_this) {
    return function($location) {
      return {
        restrict: 'A',
        link: function(scope, element, attrs, controller) {
          var clazz, path;
          clazz = attrs.activeLink;
          path = attrs.href;
          scope.location = $location;
          return scope.$watch('location.path()', function(newPath) {
            if (newPath.indexOf(path) === 0) {
              return element.addClass(clazz);
            } else {
              return element.removeClass(clazz);
            }
          });
        }
      };
    };
  })(this));

  app.directive('filterbox', function() {
    return {
      restrict: 'E',
      scope: {
        text: '@',
        ngModel: '='
      },
      template: "<p class=\"input-group icon-inline\">\n    <span class=\"input-group-addon\">\n        <i class=\"fa fa-filter\"></i>\n    </span>\n    <input type=\"search\" class=\"form-control\" placeholder=\"[[text || 'Filter']]\" ng:model=\"ngModel\" />\n</p>",
      link: function($scope, element, attr) {}
    };
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  window.RootCtrl = function($scope, $rootScope, $timeout, $cookies, $window, $templateCache, $http, $location) {
    $scope.$location = $location;
    $scope.$timeout = $timeout;
    $scope.$window = $window;
    $scope.$cookies = $cookies;
    return $scope.Math = Math;
  };

  window.IndexCtrl = function($scope, $timeout, $interval, $location, $window) {};

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  app.factory('BankAccount', function($resource) {
    var BankAccount;
    BankAccount = $resource('/api/1/bank-account/:id/?format=json', {
      id: '@id'
    }, {
      update: {
        method: 'PUT'
      }
    }, false);
    return BankAccount;
  });

  app.factory('User', function($resource) {
    var User;
    User = $resource('/api/1/user/:id/?format=json', {
      id: '@id'
    }, {
      update: {
        method: 'PUT'
      }
    }, false);
    return User;
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  app.config(function($routeProvider, $locationProvider) {
    $locationProvider.html5Mode(true);
    return $routeProvider.when('/', {
      templateUrl: '/template/main/partial/index.html',
      controller: 'IndexCtrl'
    });
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  app.factory('Hotkeys', function($timeout, $rootScope) {
    return $timeout(function() {
      return $(document).on('keypress', function(e) {
        if (!e.metaKey && !e.ctrlKey) {
          if ($('input:focus').length === 0 && $('textarea:focus').length === 0) {
            $timeout(function() {
              return $rootScope.$apply(function() {
                var char;
                char = String.fromCharCode(e.which);
                return $rootScope.$broadcast('keypress', char, e);
              });
            });
            return false;
          }
        }
      });
    });
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice;

  Date.prototype.fromISO = function(iso) {
    return new Date(iso);
  };

  Array.prototype.remove = function() {
    var arg, args, index, output, _i, _len;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    output = [];
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      index = this.indexOf(arg);
      if (index !== -1) {
        output.push(this.splice(index, 1));
      }
    }
    if (args.length === 1) {
      output = output[0];
    }
    return output;
  };

  String.prototype.lpad = function(padString, length) {
    var str;
    str = this;
    while (str.length < length) {
      str = padString + str;
    }
    return str;
  };

}).call(this);
